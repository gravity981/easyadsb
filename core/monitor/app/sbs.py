import logging
from enum import Enum
from datetime import datetime

"""
SBS Base Station Protocol implementation, based on:
http://woodair.net/sbs/article/barebones42_socket_data.htm
"""

logger = logging.getLogger("logger")


class SBSParseError(Exception):
    pass


class SBSMessageType(Enum):
    """
    - SEL = 1, Generated when the user changes the selected aircraft in BaseStation.
    - ID  = 2, Generated when an aircraft being tracked sets or changes its callsign.
    - AIR = 3, Generated when the SBS picks up a signal for an aircraft that it isn't currently tracking,
    - STA = 4, Generated when an aircraft's status changes according to the # time-out values in the SBS1 Data Settings menu.
    - CLK = 5, Generated when the user double-clicks (or presses return) on an aircraft (i.e. to bring up the aircraft details window).
    - MSG = 6, Generated by the aircraft. There are eight different MSG transmission types, see `TransmissionType`.
    """

    SEL = 1
    ID = 2
    AIR = 3
    STA = 4
    CLK = 5
    MSG = 6


class SBSTransmissionType(Enum):
    """
    Triggered by the nose gear squat switch:
    - ESIdentificationAndCategory = 1
    - ESSurfacePosMsg = 2
    - ESAirbornePosMsg = 3
    - ESAirborneVelocityMsg = 4

    Triggered by ground radar. Not CRC secured:
    - SurveillanceAltMsg = 5
    - SurveillanceIDMsg = 6

    Triggered by TCAS:
    - AirToAirMessage = 7

    Broadcast but also triggered by ground radar:
    - AllCallReply = 8
    """

    ESIdentificationAndCategory = 1
    ESSurfacePosMsg = 2
    ESAirbornePosMsg = 3
    ESAirborneVelocityMsg = 4
    SurveillanceAltMsg = 5
    SurveillanceIDMsg = 6
    AirToAirMessage = 7
    AllCallReply = 8


class SBSMessage:
    """SBSMessage"""

    def __init__(
        self,
        msgType: SBSMessageType = None,
        transmissionType: SBSTransmissionType = None,
        sessionId: int = None,
        aircraftId: int = None,
        hexIdent: str = None,
        flightId: int = None,
        messageGeneratedDateTime: datetime = None,
        messageLoggedDateTime: datetime = None,
        callsign: str = None,
        altitude: int = None,
        groundSpeed: int = None,
        track: int = None,
        latitude: float = None,
        longitude: float = None,
        verticalRate: int = None,
        squawk: int = None,
        alert: bool = None,
        emergency: bool = None,
        spi: bool = None,
        isOnGround: bool = None,
    ):
        """
        Constructor

        :param SBSMessageType msgType: (MSG, STA, ID, AIR, SEL or CLK)
        :param SBSTransmissionType transmissionType: MSG sub types 1 to 8. Not used by other message types.
        :param int sessionId: Database Session record number
        :param int aircraftId: Database Aircraft record number
        :param str hexIdent: Aircraft Mode S hexadecimal code
        :param int flightId: Database Flight record number
        :param datetime messageGeneratedDateTime: As it says
        :param datetime messageLoggedDateTime: As it says
        :param str callsign: An eight digit flight ID - can be flight number or registration (or even nothing).
        :param int altitude: Mode C altitude. Height relative to 1013.2mb (Flight Level). Not height AMSL..
        :param int groundSpeed: Speed over ground (not indicated airspeed)
        :param int track: Track of aircraft (not heading). Derived from the velocity E/W and velocity N/S
        :param float latitude: North and East positive. South and West negative.
        :param float longitude: North and East positive. South and West negative.
        :param int verticalRate: 64ft resolution
        :param int squawk: Assigned Mode A squawk code.
        :param bool alert: Flag to indicate squawk has changed.
        :param bool emergency: Flag to indicate emergency code has been set
        :param bool spi: Flag to indicate transponder Ident has been activated.
        :param bool isOnGround: Flag to indicate ground squat switch is active
        """
        self.type = msgType
        self.transmissionType = transmissionType
        self.sessionId = sessionId
        self.aircraftId = aircraftId
        self.hexIdent = hexIdent
        self.flightId = flightId
        self.messageGeneratedDateTime = messageGeneratedDateTime
        self.messageLoggedDateTime = messageLoggedDateTime
        self.callsign = callsign
        self.altitude = altitude
        self.groundSpeed = groundSpeed
        self.track = track
        self.latitude = latitude
        self.longitude = longitude
        self.verticalRate = verticalRate
        self.squawk = squawk
        self.alert = alert
        self.emergency = emergency
        self.spi = spi
        self.isOnGround = isOnGround

    def __str__(self):
        return (
            "<SBS({type}, "
            "{transmissionType}, "
            "sessionId={sessionId}, "
            "aircraftId={aircraftId}, "
            "hexIdent={hexIdent}, "
            "flightId={flightId}, "
            "msgGenDateTime={messageGeneratedDateTime}, "
            "msgLogDateTime={messageLoggedDateTime}, "
            "callsign={callsign}, "
            "altitude={altitude}, "
            "groundSpeed={groundSpeed}, "
            "track={track}, "
            "latitude={latitude}, "
            "longitude={longitude}, "
            "verticalRate={verticalRate}, "
            "squawk={squawk}, "
            "alert={alert}, "
            "emergency={emergency}, "
            "spi={spi}, "
            "isOnGround={isOnGround})>"
        ).format(
            type=str(self.type),
            transmissionType=self.transmissionType,
            sessionId=self.sessionId,
            aircraftId=self.aircraftId,
            hexIdent=self.hexIdent,
            flightId=self.flightId,
            messageGeneratedDateTime=self.messageGeneratedDateTime,
            messageLoggedDateTime=self.messageLoggedDateTime,
            callsign=self.callsign,
            altitude=self.altitude,
            groundSpeed=self.groundSpeed,
            track=self.track,
            latitude=self.latitude,
            longitude=self.longitude,
            verticalRate=self.verticalRate,
            squawk=self.squawk,
            alert=self.alert,
            emergency=self.emergency,
            spi=self.spi,
            isOnGround=self.isOnGround,
        )


class SBSReader:
    """SBSReader"""

    def parse(msg: str) -> SBSMessage:
        """
        parses a string to a SBSMessage
        raises a :class:`SBSParseError` if string has not the expected format
        """
        tokens = msg.split(",")
        if len(tokens) != 22:
            raise SBSParseError("invalid token count")
        msg = SBSMessage(
            msgType=SBSReader._msgTypeFromToken(tokens[0]),
            transmissionType=SBSReader._transmissionTypeFromToken(tokens[1]),
            sessionId=SBSReader._intFromToken(tokens[2]),
            aircraftId=SBSReader._intFromToken(tokens[3]),
            hexIdent=SBSReader._stringFromToken(tokens[4]),
            flightId=SBSReader._intFromToken(tokens[5]),
            messageGeneratedDateTime=SBSReader._dateTimeFromTokens(tokens[6], tokens[7]),
            messageLoggedDateTime=SBSReader._dateTimeFromTokens(tokens[8], tokens[9]),
            callsign=SBSReader._stringFromToken(tokens[10]),
            altitude=SBSReader._intFromToken(tokens[11]),
            groundSpeed=SBSReader._intFromToken(tokens[12]),
            track=SBSReader._intFromToken(tokens[13]),
            latitude=SBSReader._floatFromToken(tokens[14]),
            longitude=SBSReader._floatFromToken(tokens[15]),
            verticalRate=SBSReader._intFromToken(tokens[16]),
            squawk=SBSReader._intFromToken(tokens[17]),
            alert=SBSReader._boolFromToken(tokens[18]),
            emergency=SBSReader._boolFromToken(tokens[19]),
            spi=SBSReader._boolFromToken(tokens[20]),
            isOnGround=SBSReader._boolFromToken(tokens[21]),
        )
        return msg

    def _msgTypeFromToken(msgType: str) -> SBSMessageType:
        if msgType == "MSG":
            return SBSMessageType.MSG
        if msgType == "STA":
            return SBSMessageType.STA
        if msgType == "ID":
            return SBSMessageType.ID
        if msgType == "AIR":
            return SBSMessageType.AIR
        if msgType == "SEL":
            return SBSMessageType.SEL
        if msgType == "CLK":
            return SBSMessageType.CLK
        raise SBSParseError('unknown msg type "{}"'.format(msgType))

    def _transmissionTypeFromToken(txType: str) -> SBSTransmissionType:
        return SBSTransmissionType(int(txType)) if txType else None

    def _intFromToken(val: str) -> int:
        return int(val) if val else None

    def _floatFromToken(val: str) -> float:
        return float(val) if val else None

    def _boolFromToken(val: str) -> bool:
        return val != "0" if val else None

    def _stringFromToken(val: str) -> str:
        return val if val else None

    def _dateTimeFromTokens(dateVal: str, timeVal: str) -> datetime:
        return datetime.strptime(dateVal + " " + timeVal, "%Y/%m/%d %H:%M:%S.%f")
