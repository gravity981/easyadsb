import logging
from enum import Enum
from datetime import datetime

# http://woodair.net/sbs/article/barebones42_socket_data.htm

logger = logging.getLogger("logger")


class SBSParseError(Exception):
    pass


class SBSMessageType(Enum):
    # Generated when the user changes the selected aircraft in BaseStation.
    SEL = 1
    # Generated when an aircraft being tracked sets or changes its callsign.
    ID = 2
    # Generated when the SBS picks up a signal for an aircraft that it
    # isn't currently tracking,
    AIR = 3
    # Generated when an aircraft's status changes according to the
    # time-out values in the SBS1 Data Settings menu.
    STA = 4
    # Generated when the user double-clicks (or presses return) on an
    # aircraft (i.e. to bring up the aircraft details window).
    CLK = 5
    # Generated by the aircraft. There are eight different MSG
    # transmission types, see `TransmissionType`.
    MSG = 6


class SBSTransmissionType(Enum):
    ESIdentificationAndCategory = 1
    # Triggered by the nose gear squat switch.
    ESSurfacePosMsg = 2
    ESAirbornePosMsg = 3
    ESAirborneVelocityMsg = 4
    # Triggered by ground radar. Not CRC secured.
    SurveillanceAltMsg = 5
    SurveillanceIDMsg = 6
    # Triggered by TCAS.
    AirToAirMessage = 7
    # Broadcast but also triggered by ground radar.
    AllCallReply = 8


class SBSMessage:
    def __init__(
        self,
        # (MSG, STA, ID, AIR, SEL or CLK)
        msgType: SBSMessageType = None,
        # MSG sub types 1 to 8. Not used by other message types.
        transmissionType: SBSTransmissionType = None,
        # Database Session record number
        sessionId: int = None,
        # Database Aircraft record number
        aircraftId: int = None,
        # Aircraft Mode S hexadecimal code
        hexIdent: str = None,
        # Database Flight record number
        flightId: int = None,
        # As it says
        messageGeneratedDateTime: datetime = None,
        # As it says
        messageLoggedDateTime: datetime = None,
        # An eight digit flight ID - can be flight number or registration (or even nothing).
        callsign: str = None,
        # Mode C altitude. Height relative to 1013.2mb (Flight Level). Not height AMSL..
        altitude: int = None,
        # Speed over ground (not indicated airspeed)
        groundSpeed: int = None,
        # Track of aircraft (not heading). Derived from the velocity E/W and velocity N/S
        track: int = None,
        # North and East positive. South and West negative.
        latitude: float = None,
        # North and East positive. South and West negative.
        longitude: float = None,
        # 64ft resolution
        verticalRate: int = None,
        # Assigned Mode A squawk code.
        squawk: int = None,
        # Flag to indicate squawk has changed.
        alert: bool = None,
        # Flag to indicate emergency code has been set
        emergency: bool = None,
        # Flag to indicate transponder Ident has been activated.
        spi: bool = None,
        # Flag to indicate ground squat switch is active
        isOnGround: bool = None,
    ):
        self.type = msgType
        self.transmissionType = transmissionType
        self.sessionId = sessionId
        self.aircraftId = aircraftId
        self.hexIdent = hexIdent
        self.flightId = flightId
        self.messageGeneratedDateTime = messageGeneratedDateTime
        self.messageLoggedDateTime = messageLoggedDateTime
        self.callsign = callsign
        self.altitude = altitude
        self.groundSpeed = groundSpeed
        self.track = track
        self.latitude = latitude
        self.longitude = longitude
        self.verticalRate = verticalRate
        self.squawk = squawk
        self.alert = alert
        self.emergency = emergency
        self.spi = spi
        self.isOnGround = isOnGround

    def __str__(self):
        return (
            "<SBS({type}, "
            "{transmissionType}, "
            "sessionId={sessionId}, "
            "aircraftId={aircraftId}, "
            "hexIdent={hexIdent}, "
            "flightId={flightId}, "
            "msgGenDateTime={messageGeneratedDateTime}, "
            "msgLogDateTime={messageLoggedDateTime}, "
            "callsign={callsign}, "
            "altitude={altitude}, "
            "groundSpeed={groundSpeed}, "
            "track={track}, "
            "latitude={latitude}, "
            "longitude={longitude}, "
            "verticalRate={verticalRate}, "
            "squawk={squawk}, "
            "alert={alert}, "
            "emergency={emergency}, "
            "spi={spi}, "
            "isOnGround={isOnGround})>"
        ).format(
            type=str(self.type),
            transmissionType=self.transmissionType,
            sessionId=self.sessionId,
            aircraftId=self.aircraftId,
            hexIdent=self.hexIdent,
            flightId=self.flightId,
            messageGeneratedDateTime=self.messageGeneratedDateTime,
            messageLoggedDateTime=self.messageLoggedDateTime,
            callsign=self.callsign,
            altitude=self.altitude,
            groundSpeed=self.groundSpeed,
            track=self.track,
            latitude=self.latitude,
            longitude=self.longitude,
            verticalRate=self.verticalRate,
            squawk=self.squawk,
            alert=self.alert,
            emergency=self.emergency,
            spi=self.spi,
            isOnGround=self.isOnGround,
        )


def msgTypeFromToken(msgType: str) -> SBSMessageType:
    if msgType == "MSG":
        return SBSMessageType.MSG
    if msgType == "STA":
        return SBSMessageType.STA
    if msgType == "ID":
        return SBSMessageType.ID
    if msgType == "AIR":
        return SBSMessageType.AIR
    if msgType == "SEL":
        return SBSMessageType.SEL
    if msgType == "CLK":
        return SBSMessageType.CLK
    raise SBSParseError('unknown msg type "{}"'.format(msgType))


def transmissionTypeFromToken(txType: str) -> SBSTransmissionType:
    return SBSTransmissionType(int(txType)) if txType else None


def intFromToken(val: str) -> int:
    return int(val) if val else None


def floatFromToken(val: str) -> float:
    return float(val) if val else None


def boolFromToken(val: str) -> bool:
    return val != "0" if val else None


def stringFromToken(val: str) -> str:
    return val if val else None


def dateTimeFromTokens(dateVal: str, timeVal: str) -> datetime:
    return datetime.strptime(dateVal + " " + timeVal, "%Y/%m/%d %H:%M:%S.%f")


def parse(msg: str) -> SBSMessage:
    tokens = msg.split(",")
    if len(tokens) != 22:
        raise SBSParseError("invalid token count")
    msg = SBSMessage(
        msgType=msgTypeFromToken(tokens[0]),
        transmissionType=transmissionTypeFromToken(tokens[1]),
        sessionId=intFromToken(tokens[2]),
        aircraftId=intFromToken(tokens[3]),
        hexIdent=stringFromToken(tokens[4]),
        flightId=intFromToken(tokens[5]),
        messageGeneratedDateTime=dateTimeFromTokens(tokens[6], tokens[7]),
        messageLoggedDateTime=dateTimeFromTokens(tokens[8], tokens[9]),
        callsign=stringFromToken(tokens[10]),
        altitude=intFromToken(tokens[11]),
        groundSpeed=intFromToken(tokens[12]),
        track=intFromToken(tokens[13]),
        latitude=floatFromToken(tokens[14]),
        longitude=floatFromToken(tokens[15]),
        verticalRate=intFromToken(tokens[16]),
        squawk=intFromToken(tokens[17]),
        alert=boolFromToken(tokens[18]),
        emergency=boolFromToken(tokens[19]),
        spi=boolFromToken(tokens[20]),
        isOnGround=boolFromToken(tokens[21]),
    )
    return msg
